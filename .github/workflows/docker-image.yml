name: CI/CD Workflow

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  WORKDIR: ./ansible

jobs:

  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Build the Docker image
        run: make build-stable

  check:
    name: Syntax Check
    runs-on: ubuntu-latest
    container:
      image: maissacrement/ansibledind:10e77ca-stable
      options: --entrypoint="/home/entrypoint.sh run" --privileged -u root
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: list repo
        run: ls && pwd
      - name: Run Ansible Syntax Check
        working-directory: ${{ env.WORKDIR }}
        run: >
          ansible-playbook --syntax-check site.yml -i ./inventory/staging/hosts.yml --extra-vars "ansible_role_include_tasks=true"

  lint:
    name: Ansible Lint
    runs-on: ubuntu-latest
    container:
      image: maissacrement/ansibledind:10e77ca-stable
      options: --entrypoint="/home/entrypoint.sh run" --privileged -u root
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Run Ansible Lint
        working-directory: ${{ env.WORKDIR }}
        run: ansible-lint -vv

  vault-is-working:
    name: Ansible Lint
    runs-on: ubuntu-latest
    container:
      image: maissacrement/ansibledind:10e77ca-stable
      options: --entrypoint="/home/entrypoint.sh run" --privileged -u root
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Run Vault execution
        run: |
          export VAULT_PASSWORD="hello"
          python3 ~/.ansible_vault_secret/create-vault-local-secret-for-gitlab.py --plain-text-inventory ./inventory/staging/hosts.yml --vault-file test.yml --password hello
          export VAULT_HOSTS_SECRETS="$(cat test.yml)"
          python3 ~/.ansible_vault_secret/generate-inventory.py --list
